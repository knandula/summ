/**
 * Copyright ï¿½ 2003-2006 by The Trustees of Columbia University in 
 * the City of New York.  All rights reserved.  This software is being
 * provided at no cost for educational and/or research purposes only.
 *
 * Author: Michel Galley, galley@cs.columbia.edu
 * $Id: TextToolkit.cc 43 2006-11-14 00:22:30Z galley $
 */

#include <iostream>
#include <fstream>

#include <string.h>
#define TOTAL_KEYWORDS 421
#define MIN_HASH_VAL 0
#define MAX_HASH_VAL 420
#define MIN_CHAR_VAL 'a'
#define MAX_CHAR_VAL 'z'
#define MAX_WORD_LENG 13
#define MIN_WORD_LENG 1
#define MAX_TABLE_HEIGHT 13
#define MAX_GRAPH_NODE_VAL 2105

//extern "C" {
//#include <lcseg/stoplist.h>
//}

#include <lcseg/TextToolkit.h>
#include <lcseg/logging.h>
#include <lcseg/defs.h>

using namespace std;

static long T1[13][26]=
{{1832,1562,314,819,1537,678,439,607,12,1824,2059,358,136,1774,206,
    897,262,1564,36,1676,971,954,408,-1,1790,1268},
{1675,347,1987,-1,1296,709,600,1163,585,-1,-1,1928,1247,1810,1091,
    2063,-1,1332,1887,901,265,2069,601,1450,425,-1},
{655,693,1387,1995,715,2014,1453,65,2052,-1,1374,1525,1493,1911,1268,
    317,-1,2027,97,950,862,1316,1180,1531,592,1567},
{1207,401,186,1805,1764,624,-1,2036,469,-1,300,1617,740,1127,1407,
    1652,-1,1976,908,1423,831,1129,1238,-1,540,-1},
{1888,1243,1985,1451,714,1875,151,1563,313,-1,-1,1454,111,1371,1965,
    2022,-1,2005,1119,393,1829,1685,587,-1,376,-1},
{1196,854,1464,955,264,1430,1163,475,1385,-1,-1,1153,-1,1086,2100,
    1404,1640,339,578,503,650,1757,1722,-1,1639,-1},
{1354,342,1710,1830,70,188,1910,1121,236,-1,-1,1452,1350,1151,1759,
    127,-1,1630,1918,1657,1792,1593,1385,-1,1232,-1},
{1531,-1,-1,1398,1894,1767,1893,1884,1188,-1,-1,536,801,364,880,
    -1,-1,1497,1606,578,-1,1686,-1,-1,1719,-1},
{1498,-1,-1,1933,1628,-1,2003,-1,-1,-1,-1,1206,-1,1687,1045,
    -1,-1,865,1009,1058,1784,745,-1,-1,1556,-1},
{-1,-1,-1,2063,1737,-1,1066,-1,-1,-1,-1,480,-1,-1,-1,
    -1,-1,1398,1420,1205,-1,-1,-1,-1,1869,-1},
{-1,-1,-1,-1,660,-1,-1,-1,700,-1,-1,117,-1,-1,-1,
    -1,-1,-1,966,-1,-1,-1,-1,-1,455,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1124,-1,
    -1,-1,-1,2022,-1,-1,-1,-1,-1,1862,-1},
{-1,-1,-1,-1,-1,-1,424,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
};
static long T2[13][26]=
{{1817,1279,1179,1086,1635,405,1756,1820,574,525,1383,1120,1870,1116,1731,
    925,1023,1375,1560,551,1077,782,64,-1,1135,1409},
{1317,515,950,-1,965,710,1835,1244,822,-1,-1,301,439,692,2048,
    575,-1,1029,1126,833,2018,1530,1923,1896,1896,-1},
{1362,1304,1280,454,414,185,438,490,1327,-1,2085,2053,973,509,857,
    1796,-1,978,223,91,486,186,959,79,1882,2030},
{1502,1286,1497,493,1422,349,-1,1528,532,-1,786,549,1648,1503,1965,
    416,-1,2097,1159,106,404,33,531,-1,1308,-1},
{112,505,1355,614,102,1543,1161,1442,739,-1,-1,825,982,2075,1100,
    1737,-1,1321,2018,322,591,1112,1270,-1,683,-1},
{1954,5,682,1624,1408,1865,1805,1828,775,-1,-1,663,-1,779,1594,
    1465,1565,636,1250,682,1828,1120,624,-1,889,-1},
{1909,757,1178,1687,2051,950,1631,1327,1441,-1,-1,1116,1808,1562,9,
    1598,-1,806,1722,1130,859,963,5,-1,1418,-1},
{1762,-1,-1,1055,933,1119,1980,1639,1415,-1,-1,189,1057,1594,479,
    -1,-1,2001,1779,1925,-1,97,-1,-1,1074,-1},
{754,-1,-1,338,1672,-1,1840,-1,-1,-1,-1,555,-1,1414,812,
    -1,-1,1703,832,170,1955,1254,-1,-1,1197,-1},
{-1,-1,-1,540,799,-1,682,-1,-1,-1,-1,961,-1,-1,-1,
    -1,-1,111,821,163,-1,-1,-1,-1,1377,-1},
{-1,-1,-1,-1,895,-1,-1,-1,23,-1,-1,1965,-1,-1,-1,
    -1,-1,-1,1481,-1,-1,-1,-1,-1,693,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,700,-1,
    -1,-1,-1,1429,-1,-1,-1,-1,-1,498,-1},
{-1,-1,-1,-1,-1,-1,237,-1,-1,-1,-1,-1,-1,-1,-1,
    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
};
#define MAX_NODE_NUM 704
static long node[704]=
{1832,1817,461,1810,1080,1219,481,751,530,558,945,1151,451,529,717,
    1306,847,1581,1075,2066,1542,236,1967,1441,554,370,2096,1429,1101,1357,1054,
    96,525,1515,786,197,974,151,1415,1567,1545,1842,1537,404,1427,858,1370,
    813,24,181,367,1399,1328,961,1419,1124,1836,579,1713,392,1330,298,1091,
    604,1963,1888,43,1003,253,1774,1155,1274,1491,1614,838,1975,655,1586,677,
    628,545,1761,113,1523,95,697,920,753,139,1617,498,1564,1630,1181,1772,
    263,490,2056,128,808,215,1641,1508,650,1978,2025,62,1217,929,811,742,
    428,168,468,2074,1074,860,1728,868,736,165,285,672,1283,1987,1070,1036,
    681,1795,900,1180,2080,1113,1006,33,841,1064,1467,1051,748,1569,1382,1159,
    134,483,1405,1122,1227,519,400,1869,744,785,743,2081,474,244,1755,15,
    1125,666,1416,816,1711,1249,1580,1294,257,272,680,1910,1029,1428,497,1030,
    810,1375,855,7,1386,988,1904,74,320,1550,32,1365,1794,535,1951,1116,
    1476,1163,1878,1862,262,1210,333,363,1720,1643,1238,872,2087,1466,358,44,
    1715,205,1293,2028,1354,1220,882,1426,1312,467,243,232,170,595,1049,224,
    2053,381,133,730,1646,1465,676,1129,81,1691,1326,1379,1607,340,1692,769,
    397,826,1913,1834,1535,848,1229,1618,580,707,1488,1866,1265,2051,1013,1994,
    1530,1699,1048,1167,1480,995,1525,375,1790,1493,67,1486,1654,1637,787,274,
    1255,1152,286,1420,1903,504,683,1825,1658,1484,975,798,403,156,264,778,
    388,424,712,578,322,1510,1438,174,1289,760,1021,789,773,617,720,1805,
    1906,12,574,1308,1539,721,1284,1714,879,387,1883,1822,1266,1425,994,1104,
    441,935,658,493,1309,321,1647,1502,36,1187,308,1712,1442,767,1128,854,
    357,1899,1700,913,1407,1010,1448,1532,1504,1512,1073,885,40,60,1358,1431,
    1179,1271,661,1267,210,1352,1505,718,1362,1069,309,499,71,1976,1239,824,
    162,2031,514,1149,302,52,794,859,1432,361,1575,393,770,3,1887,2065,
    642,37,1751,1719,1921,561,1661,1096,1786,391,618,227,1800,528,1582,1840,
    800,764,1814,161,1824,1764,1059,1740,1621,225,682,2037,1319,335,1710,1150,
    740,1084,1387,1940,2018,889,20,915,336,521,790,1819,1369,870,2024,2016,
    318,957,626,732,1534,1891,1574,163,269,1538,731,1587,788,143,1827,517,
    1301,1676,1349,959,1421,1735,1562,993,756,1039,1348,613,2058,345,267,703,
    10,763,941,1380,1601,1920,385,766,1191,833,1391,89,1242,1350,506,366,
    963,839,755,235,1302,295,1463,299,1821,275,487,758,1062,1106,1708,137,
    1203,1134,2047,834,377,246,2103,1886,1801,290,1376,1068,1753,671,456,1035,
    2046,265,1573,1998,645,104,715,1914,1497,199,1327,280,47,356,1127,1503,
    1793,338,1012,624,1190,1513,1540,398,986,1995,148,1063,305,221,90,386,
    942,1765,1496,1850,884,1619,1164,1165,1135,411,450,1158,1826,1071,1449,1818,
    1957,291,1102,84,1752,1338,464,471,615,160,2034,198,495,2015,2033,360,
    430,507,1168,1307,966,1989,1412,2003,1623,1589,422,832,249,1519,1808,1835,
    87,1966,41,1625,533,1487,1072,399,1335,662,494,2104,136,1930,1351,1799,
    1690,1612,1019,1440,1226,1769,125,1452,92,1444,1112,928,1652,1907,98,1468,
    512,1005,864,271,1671,1984,346,782,1489,448,1944,607,1928,861,1001,1529,
    1908,75,1604,570,1704,636,1526,828,1644,1285,1324,1544,1372,1120,1778,1136,
    79,1816,8,1775,1282,747,1197,2048,2005,820,1985,673,851,1162,1364,1744,
    83,82,734,1867,598,960,711,1474,251,1321,58,1085,2030,1383,1874,1918,
    1936,248,1656,1078,218,1931,86,1638,1509,1556,523,1469,1901,902,268,1788,
    1107};
static long G[704]=
{0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,
    7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,
    15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,
    23,0,24,0,25,26,0,27,0,28,0,29,0,30,0,31,
    0,32,0,33,0,34,0,35,267,190,0,37,0,38,0,39,
    0,40,0,41,0,42,0,43,0,44,45,46,47,0,48,0,
    49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,
    57,0,58,127,353,0,60,61,49,0,63,0,64,0,65,0,
    66,0,67,0,68,0,69,21,7,0,72,0,73,74,0,75,
    0,76,0,77,0,78,0,79,0,80,0,81,82,0,83,84,
    0,85,0,86,0,87,88,0,89,0,90,194,318,0,92,0,
    93,0,94,0,95,51,0,97,0,98,0,99,0,100,101,0,
    102,0,103,0,104,105,0,106,0,107,0,108,0,109,0,110,
    0,111,0,112,84,114,0,115,0,116,0,117,0,118,0,119,
    26,113,0,122,0,123,0,124,125,0,126,0,127,0,128,13,
    0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,
    0,138,0,139,87,0,141,0,142,143,0,144,0,145,146,0,
    147,48,0,149,60,0,151,0,152,0,153,0,154,0,155,0,
    156,157,158,0,159,160,0,161,0,162,0,163,39,125,0,165,
    131,0,167,0,168,0,169,0,170,0,171,0,172,276,318,0,
    174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,
    183,0,184,0,185,186,0,187,188,0,189,386,225,0,191,166,
    0,193,194,108,0,196,0,197,198,174,25,0,200,0,201,0,
    202,0,203,0,204,0,205,206,85,0,208,0,209,159,0,211,
    0,212,213,101,215,0,216,0,217,0,218,219,0,221,128,0,
    223,224,0,226,417,231,66,0,229,265,0,232,0,233,0,234,
    190,0,236,0,237,0,238,0,239,240,0,241,0,242,130,0,
    244,245,170,76,0,247,248,0,249,212,0,251,224,0,254,255,
    0,256,0,257,0,258,0,259,260,0,261,0,262,263,0,264,
    0,265,0,266,267,234,0,269,0,270,0,271,0,273,0,274,
    0,275,0,276,0,278,0,279,0,280,90,0,282,0,283,284,
    0,285,0,286,287,0,288,289,0,290,292,0,293,294,0,295,
    0,296,0,297,0,298,269,300,0,301,0,302,0,303,0,304,
    144,303,0,307,0,308,0,309,310,0,311,0,312,0,313,0,
    314,22,316,0,317,119,102,160,322,0,323,190,0,325,28,0,
    327,0,328,0,329,0,330,204,0,332,0,333,200,106,336,0,
    337,338,0,339,241,0,341,0,342,143,344,0,345,0,346,263,
    30,0,349,0,350,0,351,0,352,0,353,0,354,0,355,0,
    356,18,358,0,359,360,101,0,362,0,363,364,365,364,367,0,
    368,369,370,0,371,372,0,373,0,374,375,0,376,106,0,378,
    330,0,380,191,64,0,383,0,384,0,385,92,129,388,389,0,
    390,122,300,0,393,109,0,395,0,396,0,397,131,0,399,352,
    0,401,402,0,403,0,404,122,0,406,0,407,0,408,409,410,
    0,411,410,0,413,0,414,368,0,416,0,417,0,418,244,0,
    420};
static char *wordlist[] =
{
"a","about","above","accordingly","across",
    "after","afterwards","again","against","all",
    "allows","almost","alone","along","already",
    "also","although","always","am","among",
    "amongst","an","and","another","any",
    "anybody","anyhow","anyone","anything","anyway",
    "anyways","anywhere","apart","appear","appropriate",
    "are","around","as","aside","associated",
    "at","available","away","awfully","be",
    "became","because","become","becomes","becoming",
    "been","before","beforehand","behind","being",
    "below","beside","besides","best","better",
    "between","beyond","both","brief","but",
    "by","came","can","cannot","cant",
    "cause","causes","certain","certainly","change",
    "changes","clearly","co","concerning","consequently",
    "consider","contain","containing","contains","corresponding",
    "could","course","currently","described","did",
    "different","do","does","doing","done",
    "down","downwards","during","each","eg",
    "eight","either","else","elsewhere","enough",
    "especially","et","etc","even","ever",
    "every","everybody","everyone","everything","everywhere",
    "ex","example","except","far","few",
    "fifth","first","five","followed","following",
    "follows","for","former","formerly","forth",
    "four","from","further","furthermore","get",
    "gets","given","gives","go","goes",
    "going","gone","got","gotten","had",
    "happens","hardly","has","have","having",
    "he","hence","her","here","hereafter",
    "hereby","herein","hereupon","hers","herself",
    "him","himself","his","hither","how",
    "howbeit","however","i","ie","if",
    "ignored","immediate","in","inasmuch","inc",
    "indeed","indicate","indicated","indicates","inner",
    "insofar","instead","into","inward","is",
    "it","its","itself","just","keep",
    "kept","know","known","knows","last",
    "latter","latterly","least","less","lest",
    "let","like","little","looks","ltd",
    "many","may","me","meanwhile","might",
    "more","moreover","most","mostly","much",
    "must","my","myself","name","namely",
    "near","necessary","neither","never","nevertheless",
    "new","next","nine","no","nobody",
    "none","noone","nor","normally","not",
    "nothing","novel","now","nowhere","of",
    "off","often","oh","old","on",
    "once","one","ones","only","onto",
    "or","other","others","otherwise","ought",
    "our","ours","ourselves","out","outside",
    "over","overall","own","particular","particularly",
    "per","perhaps","placed","please","plus",
    "possible","probably","provides","que","quite",
    "rather","re","really","relatively","respectively",
    "right","said","same","says","second",
    "secondly","see","seem","seemed","seeming",
    "seems","seen","self","selves","sensible",
    "sent","serious","seven","several","shall",
    "she","should","since","six","so",
    "some","somebody","somehow","someone","something",
    "sometime","sometimes","somewhat","somewhere","specified",
    "specify","specifying","still","sub","such",
    "sup","take","taken","than","that",
    "thats","the","their","theirs","them",
    "themselves","then","thence","there","thereafter",
    "thereby","therefore","therein","theres","thereupon",
    "these","they","third","this","thorough",
    "thoroughly","those","though","three","through",
    "throughout","thru","thus","to","together",
    "too","toward","towards","twice","two",
    "un","under","unless","until","unto",
    "up","upon","us","use","used",
    "useful","uses","using","usually","value",
    "various","very","via","viz","vs",
    "was","way","we","well","went",
    "were","what","whatever","when","whence",
    "whenever","where","whereafter","whereas","whereby",
    "wherein","whereupon","wherever","whether","which",
    "while","whither","who","whoever","whole",
    "whom","whose","why","will","with",
    "within","without","would","yes","yet",
    "you","your","yours","yourself","yourselves",
    "zero"
  };

namespace lcseg {



#ifdef __GNUC__
inline
#endif
static unsigned int
G_index(register long n)
{
    register int i;

    for(i=0; i<MAX_NODE_NUM; i++)
	if(node[i] == n)
	    return i;

    return -1;
}

#ifdef __GNUC__
inline
#endif
unsigned int
sw_hash(register char *key)
{
    register int i, leng=strlen(key);
    long f1=0, f2=0, n1=-1, n2=-1, t1, t2;

    for(i=0; i<leng; i++)
    {
	char c = key[i];
	if(c < MIN_CHAR_VAL || c > MAX_CHAR_VAL)
	    return -1;
	t1 = T1[i][key[i]-MIN_CHAR_VAL], t2 = T2[i][key[i]-MIN_CHAR_VAL];
	if(t1 == -1 || t2 == -1)
	    return -1;
	f1 += t1, f2 += t2;
    }
    f1 %= MAX_GRAPH_NODE_VAL, f2 %= MAX_GRAPH_NODE_VAL;
    n1 = G_index(f1), n2 = G_index(f2);
    return (G[n1]+G[n2]) % TOTAL_KEYWORDS;
}

#ifdef __GNUC__
inline
#endif
int /* actually boolean */
sw_in_word_set(register char *str)
{
    int len = strlen(str);
    if(len <= MAX_WORD_LENG && len >= MIN_WORD_LENG)
    {
	register unsigned int key = sw_hash(str);

	if (key <= MAX_HASH_VAL && key >= 0)
	{
	    register char *s = wordlist[key];

	    if (*s == *str && !strcmp (str + 1, s + 1))
		return 1;
	}
    }
    return 0;
}

Lexicon TextToolkit::_lexicon;
int TextToolkit::_DL = 1;

void
TextToolkit::load_commonword_list(const char* filename) {
  ifstream is(filename);
  if(is.fail()) {
    cerr << "Can't open stopword list: " << filename << endl;
    exit(1);
  }
  string tok;
  while(getline(is,tok))
    if(tok != "%%") {
      _lexicon.insert(tok);
	}
}

bool 
TextToolkit::is_commonword(char* tok) {
  // Use the dynamic list of stop words, if it is 
  // available:
  if(!_lexicon.empty()) {
  	bool is_common = (_lexicon.find(tok) != _lexicon.end());
	if(is_common) {
		LOGT(_DL,3,"dyn-common: " << tok);
	} else {
		LOGT(_DL,3,"dyn-uncommon: " << tok);
	}
    return is_common;
  }
  bool is_common = false;
  DLOG("LEN: " << strlen(tok));
  if(strlen(tok) == 1) {
    is_common = true;
    char c0 = tok[0];
#ifdef REMOVE_DIGITS
    if(isdigit(c0)) 
      is_common = true;
#endif
#ifdef REMOVE_ALPHA
    if(isalpha(c0)) 
      is_common = true;
#endif
  }
#ifdef REMOVE_STOPWORDS
  if(sw_in_word_set(tok))
    is_common = true;
#endif
  if(is_common) {
    LOGT(_DL,3,"static-common: " << tok);
  } else {
    LOGT(_DL,3,"static-uncommon: " << tok);
  }
  return is_common;
}

}
